h1. Compass

h2. Idea: Iterative Dichotomization on Every Attribute

<img src="http://afrolegs.com/kc1.png" alt="Idea" />

h2. Compass Explorer

<img src="http://afrolegs.com/compass.png" alt="Compass" />

h2. What is Compass?

Compass is a clustering mechanism which respects the connection
between independent variables in examples/instances.

Compass accepts n data points and uses an O(n) fastmap routine to find
the two most separated points in the current selection.  With a
distance metric, the remaining points are shifted to one pole or
another and the algorithm recurses on itself until a stopping point is
reached.  Compass stops when a minimum leaf size is reached, which is
generally the sqrt(n).

A Compass tree is then pruned back by removing areas of greater
variance.

h2. Getting started

h3. Lisp

The lisp environment is loaded from the compass/trunk/src/
directory. Every file you need to run Compass experiments is located
in that library make file.

To start, fire up emacs and M-x slime while inside src/. To load the
library files, run:

(load "compass")

From there, you can access any of the support functions and datasets.

Other operations:

Calling a table: (albrecht)

Returning the instances from a table: (table-egs (albrecht))

Normalizing: (normalize (table-egs (albrecht)))

Shuffling data from a table: (shuffle (table-egs (albrecht)))

Creating K-means clusters: (meat-processor 8 (k-means 8 (table-egs (nasa93))))

Generating a compass tree: (compass (table-egs (cocomo81)) :distance-func 'euclidean-distance)

Generating a compass tree on data with a discrete class value:
(compass (table-egs (sonar)) :distance-func 'euclidean-distance :variance-func 'entropy)

Outputting a dot file for Graphviz of a Compass tree:
(dot-compass (compass (table-egs (cocomo81)) :distance-func 'euclidean-distance) "cocomo81.dot")



h3. Python

h4. Prerequisites

Compass python implementation requires python26 and the following libraries:

networkx
numpy
pydot
scipy
argparse

and for the graphical explorer:

wxpython
networkx

h4. How to run?

h5. Compass Explorer

compass.py relies on your environment being setup correctly.

To generate visualizations like the one above for the telecom1
dataset, simply enter compass/trunk/src/python/ and run something like
the following:

./compass.py --arff arff/telecom1.arff --pydot --nx

This command will generate a networkx graph as well as a graphviz dot,
both in png format.

h5. IDEA

usage: idea.py [-h] [--train FILE [FILE ...]] [--test FILE [FILE ...]]
               [--stratisfied RATIO RATIO] [--m M] [--n N] [--logX] [--logY]
               [--magnetic] [--nonormalize] [--equalwidth] [--equalfrequency]
               [--cluster] [--q Q] [--lives]

Perform IDEA on given train and test sets.

optional arguments:
  -h, --help            show this help message and exit
  --train FILE [FILE ...]
                        Specify arff file[s] from which to construct the
                        training set.
  --test FILE [FILE ...]
                        Specify arff files[s] from which to construct a test
                        set. Not specifying this results in a self-test that's
                        only useful for quick tests of the software.
  --stratisfied RATIO RATIO
                        Specify a ratio for a stratisfied cross-validation
                        scheme. This takes two arguments for a x train to x
                        test ratio. Do not include a test set with this flag.)
  --m M                 Set m initial horizontal splits for clustering.
  --n N                 Set n initial vertical splits for clustering.
  --logX                Apply a log transform to the X axis.
  --logY                Apply a log transform to the Y axis.
  --magnetic            Force the West pole to be more densely populated.
  --nonormalize         Prevents normalization of data in the range (0,1)
  --equalwidth          Instructs equally sized splits based on graph
                        distance.
  --equalfrequency      Instructs equally sized splits based on distribution
                        of points on the graph.
  --cluster             Enables quadrant clustering.
  --q Q                 Minimum Quadrant size
  --lives               Turn on 3 lives splitting rule.

  Example:

  ./idea.py --cluster --equalfrequency --m 1 --n 1 --logX --logY --q 10 --lives --train arff/defect/kc1.arff
