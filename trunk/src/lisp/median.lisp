(defun median (l)
  (if (numberp (first l))
      (if (= (length l) 1)
	  (first l)
	  (let ((n (make-normal-from-list l)))
	    (/ (normal-sum n) (normal-n n))))
      (if (= (length l) 1)
	  (first l)
	  (majority-class l))))
		   
(defun condense-lists (l)
  (let (big-list)
    (dolist (v l)
      (dolist (e v)
	(push e big-list)))
    big-list))
      
(defun generic-median (l)
  "median calculated as cieling of ( (max - min) / 2 )"
  (let ((l (sort l #'<)))
    (ceiling (/ (- (nth (- (length l) 1) l) (nth 0 l)) 2))))

(defun favored-median (v1 v2 &optional (w1 1) (w2 1))
  (let ((vhat))
    (dotimes (i (length v1))
      (let (l)
        (dotimes (j (1+ w1))
          (push (nth i v1) l))
        (dotimes (k (1+ w2))
          (push (nth i v2) l))
        (if (numberp (nth i v1))
            (push (/ (sum l) (length l)) vhat)
            (if (eql (nth i v1) (nth i v2))
                (push (nth i v1) vhat)
                (push (random-element l) vhat)))))
    (reverse vhat)))

