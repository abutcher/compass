(defun cosine-similarity (vec-one vec-two)
  (let ((vec-one-mag (vector-mag vec-one))
	(vec-two-mag (vector-mag vec-two)))
    (if (zerop vec-one-mag)
	(setf vec-one-mag 0.00001))
    (if (zerop vec-two-mag)
	(setf vec-two-mag 0.00001))
    (/ (dot vec-one vec-two)
       (* vec-one-mag vec-two-mag))))

(defun vector-mag (vec)
  (let ((mag 0)
	(vec (rmnth (length vec) vec)))
    (dolist (val vec)
      (if (numberp val)
	  (setf mag (+ mag (* val val)))
	  (incf mag)))
    (sqrt mag)))

(defun dot (vec-one vec-two)
  (let ((result 0))
    (dotimes (i (1- (length vec-one)))
      (if (numberp (nth i vec-one))
	  (setf result (+ result 
			  (* (nth i vec-one) 
			     (nth i vec-two))))
	  (incf result)))
    result))