(defun variance-prune (c-tree &key (alpha 0) (beta 0))
  (let ((max (max-variance c-tree)))
    (labels ((walk (c-node &optional (level 0))
	       (unless (> 2 level)
		 (unless (null (node-right c-node))
		   (if (or 
			(< (* alpha (realpart (node-variance c-node)))
			   (realpart (node-variance (node-right c-node))))
			(< (* beta max)
			   (realpart (node-variance (node-right c-node)))))
		       (setf (node-right c-node) nil)))
		 (unless (null (node-left c-node))
		   (if (or 
			(< (* alpha (realpart (node-variance c-node)))
			   (realpart (node-variance (node-left c-node))))
			(< (* beta max)
			   (realpart (node-variance (node-left c-node)))))
		       (setf (node-left c-node) nil))))
	       (unless (null (node-right c-node))
		 (walk (node-right c-node) (1+ level)))
	       (unless (null (node-left c-node))
		 (walk (node-left c-node) (1+ level)))))
      
      (walk c-tree))
    c-tree))

(defun max-variance (c-tree)
  (let ((max 0))
    (labels ((walk (c-node)
	       (if (< max (realpart (node-variance c-node)))
		   (setf max (realpart (node-variance c-node))))
	       (unless (null (node-right c-node))
		 (walk (node-right c-node)))
	       (unless (null (node-left c-node))
		 (walk (node-left c-node)))))
      (walk c-tree))
    max))
